# -*- coding: utf-8 -*-
"""scipy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/143hkszdh90XrJ-_qqPSouxO8kTpPTmHV
"""

pip install scipy

import scipy
#example : integration using quad function
from scipy import integrate
result,error=integrate.quad(lambda x: x**2,0,1) #integration for x^2 with limits 0 to 1 => 1/3=0.33333
print("Result:",result)
print("Error:",error)

add=lambda x,y:x+y
#using lambda function
result=add(3,7)
print(result)

import numpy as np
from scipy import optimize
#optimization
result

import numpy as np
from scipy import optimize
result_optimization=optimize.minimize_scalar(lambda x: x**2+3*x+5)
print("result_optimization",result_optimization.x)

import numpy as np
import matplotlib.pyplot as plt
from scipy import interpolate #interpolation
x_data=np.array([0,1,2,3,4])
y_data=np.array([0,2,1,3,5])
interp_func=interpolate.interp1d(x_data,y_data,kind='linear')
interp_result=interp_func(2.5)
plt.plot(x_data,y_data)
print("interpolation result: ",interp_result)

import numpy as np
import pandas as pd
import scipy.stats as stats
import statsmodels.api as sm

#generate sample data
np.random.seed(0) # output won't change all the time
data=pd.DataFrame({
    'Treatment':np.random.choice(['A','B','C'],size=100),
    'Score':np.random.normal(loc=10,scale=2,size=100) #loc =mean ,scale=standard deviation
})
print(data)

import random
random.seed(0)
print(random.random())
print(random.random())

#hypothesis testing (t-test)
group_A=data[data['Treatment']=='A']['Score']
group_B=data[data['Treatment']=='B']['Score']
t_stat,p_value=stats.ttest_ind(group_A,group_B)
print("t-statistic:",t_stat)
print("p-value:",p_value)

#generate sample data
np.random.seed(0) # output won't change all the time
data=pd.DataFrame({
    'Treatment':np.random.normal(loc=12,scale=3,size=10),
    'Score':np.random.normal(loc=10,scale=2,size=10) #loc =mean ,scale=standard deviation
})
print(data)
mv=data['Treatment'].mean()
print("treatment mean :",mv)
mv1=data['Score'].mean()
print("score mean:",mv1)
#hypothesis testing (t-test)
group_A=data['Treatment']
group_B=data['Score']
t_stat,p_value=stats.ttest_ind(group_A,group_B)
print("t-statistic:",t_stat)
print("p-value:",p_value)

#generate sample data
np.random.seed(0) # output won't change all the time
data=pd.DataFrame({
    'Treatment':np.random.choice(['A','B','C'],size=100),
    'Score':np.random.normal(loc=10,scale=2,size=100) #loc =mean ,scale=standard deviation
})
print(data)
#ANOVA (one-way ANOVA)
f_stat,p_value = stats.f_oneway(data[data['Treatment']=='A']['Score'],
                              data[data['Treatment']=='B']['Score'],
                              data[data['Treatment']=='C']['Score'])
print("f-statistic:",f_stat)
print("p-value:",p_value)

from statsmodels.stats.multicomp import pairwise_tukeyhsd
# Combine all data into a single array
all_data = np.concatenate([group_A, group_B])
# Create labels for groups
labels = ['Group 1'] * len(group_A) + ['Group 2'] * len(group_B)
# Perform Tukey's HSD test
tukey_results = pairwise_tukeyhsd(all_data, labels, alpha=0.05)
# Print pairwise comparisons
print(tukey_results)

#generate sample data
np.random.seed(0) # output won't change all the time
data=pd.DataFrame({
    'Treatment':np.random.normal(loc=12,scale=3,size=10),
    'Score':np.random.normal(loc=10,scale=2,size=10) #loc =mean ,scale=standard deviation
})
print(data)
mv=data['Treatment'].mean()
print("treatment mean :",mv)
mv1=data['Score'].mean()
print("score mean:",mv1)
#hypothesis testing (t-test)
group_A=data['Treatment']
group_B=data['Score']
f_stat,p_value = stats.f_oneway(group_A,group_B)
print("f-statistic:",f_stat)#significance  different of mean value variance
print("p-value:",p_value)

#regression analysis (simple linear regression)
X=sm.add_constant(data['Treatment'].replace({'A':0,'B':1,'C':2}))
model=sm.OLS(data['Score'],X)
results=model.fit()
print(results.summary())

import numpy as np
import statsmodels.api as sm

# Sample data
X = np.array([1, 2, 3, 4, 5])  # Independent variable
y = np.array([2, 4, 5, 4, 5])  # Dependent variable

# Add a constant to the independent variable (for intercept estimation)
X = sm.add_constant(X)

# Create OLS model
model = sm.OLS(y, X)

# Fit the model
results = model.fit()

# Print summary of results
print(results.summary())