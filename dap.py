# -*- coding: utf-8 -*-
"""DAP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MM_jfy2NaN3xIXuuT_8fn0tZRZEVKz0Q
"""

!pip install numpy

import numpy as np
#creating arrays
arr=np.array([1,2,3,4,5])
print(arr)
a=np.zeros((3,3),dtype=int)
print(a)
b=np.ones((2,2),dtype=int)
print(b)
range=np.arange(10)
print(range)
#array manipulation
c=arr.reshape(5,1)
print(c)
#slicing
scile=arr[2:4]
print(scile)

a=np.array([1,2,3,4,5])
b=np.array([1,1,1,1,1])
#element wise computation
print(a+b)
#broadcasting
print(a+3)
#vertically stack
c=np.vstack(a+b)
print(c)
#stack-horizontal
c=np.stack(a+b)
print(c)
arr1=np.array([1,2,3,4])
#spliting
d=np.split(arr1,2)
print(d)
#transpose of array
e=a.T
print(e)
matrix=np.array([[1,2,3],
        [2,3,5],
        [1,5,8]])
M=matrix.T
print(M)

#linear algebra
matrix=np.array([[1,2],[2,5]])
matrix1=np.array([[2,2],[2,2]])
c=np.dot(matrix,matrix1)
print(c)
#eigen vector and eigen values
d=np.linalg.eig(c)
print(d)
m1=np.array([[1,2,3],[5,4,6]])
m2=np.array([[7,6,5],[1,3,5]])
res=np.sum(m1)
print(res)

#mean,median,variance,standard deviation-statistical operation
a=np.array([[1,2,3],[5,4,6]])
b=np.array([1,2,3,4,5])
r1=np.mean(b)
r2=np.median(b)
r3=np.var(b)
r4=np.std(b)
print(r1)
print(r2)
print(r3)
print(r4)

#loading data sets
data=np.loadtxt("/content/data1.txt")
print(data)
data1=np.loadtxt("/content/data1.txt",dtype=int)
print(data1)
data2=np.savetxt("/content/date1.txt",data1)
print(data2)

#ploting data methods
import matplotlib.pyplot as plt
a=np.array([1,2,3,4,5,6,7,8,9,10])
plt.plot(a)
#confusion matrix

import numpy as np
m1=np.array([[1,2,3],[5,4,6]])
m2=np.array([[7,6,5],[1,3,5]])
res=np.sum(m1)
#row addition
res1=np.sum(m1,axis=0)
#column addition
res21=np.sum(m1,axis=1)
print(res)
print(res1)
print(res21)

#day-2
#pandas
import pandas as pd
a=["jwalitha","ramya","durga","jahnavi","lahari","sunny","dhanush"]
r=pd.Series(a,index=[67,43,44,89,34,45,23])
print(r)

pokemon=pd.read_csv("/content/pokemon.csv")
print(pokemon)
#head and tail-viewing
h=pokemon.head(5)
print(h)
pokemon.tail(5)

import pandas as pd
pokemon1=pd.read_csv("/content/pokemon.csv")
print(pokemon1)
print(pokemon1.loc[1])
pokemon1.shape#shaping
testing=pokemon1.tail(10)
for i in range(808,798,-1):
  pokemon1.drop([i],axis=0,inplace=True)  #pd.concat([a,b])
  testing.to_csv("manual_testing.csv")
print(testing.groupby(['Name'])['Type1'].count())

pokemon11=pd.read_csv("/content/python1.txt",sep=" ")
print(pokemon11)
print(pokemon11.loc[1])#location
print(pokemon11.loc[6:11])

pokemon3=pd.read_excel("/content/pokemon2.xlsx",sheet_name=0)
print(pokemon3)
mv=pokemon3['number'].mean()
pokemon3=pokemon3.fillna(mv)
print(mv)
pokemon3=pokemon3.drop_duplicates()#deletes duplicates
print(pokemon3)

book=pd.read_excel("/content/Book1.xlsx",sheet_name=0)
mv=book['number2'].mean()  #mean
book=book.fillna(mv)
print(book)
print(mv)
book=book.drop_duplicates() #deletes duplicates
print(book)
book.shape

from google.colab import drive
drive.mount("/content/drive")#mounting google drive

import numpy as np
import matplotlib.pyplot as plt
runs=np.array([100,50,91,78,89,25,34,19,9,10])
w=np.array([1,0,2,0,3,7,8,9,7,5])
plt.scatter(runs,w,color='orange')
plt.title('IndvsAus_score')
plt.show()

import numpy as np
import matplotlib.pyplot as plt
#generate array of 200 values between -pi & pi
tigar=np.linspace(-2*np.pi,2*np.pi,50)#by multipling with 2-representing easily on graph
print(tigar)
plt.plot(tigar,np.sin(tigar),color='black')
plt.title("sin(x)")
plt.show()

import matplotlib.pyplot as plt
a=[230,560,780,127,128]
b=[200,160,270,127,400]
years=[1,2,3,4]
profit_a=[(a[i]-a[i-1]) for i in range(1,len(a))]
profit_b=[(b[i]-b[i-1]) for i in range(1,len(b))]
plt.subplot(2,1,2)
plt.plot(years,profit_a,color='hotpink',linewidth='3',label='CompanyA',marker='+',ms='12',mec='y')
plt.subplot(2,1,1)
plt.plot(years,profit_b,color='black',linestyle='dotted',label="CompanyB",marker='H')

import numpy as np
import matplotlib.pyplot as plt
overs=np.arange(5,50,5)
overs_a=np.arange(5,30,5)
runs_i=np.array([25,51,84,131,160,189,220,250,267])
runs_a=np.array([15,41,94,110,151])
wickets=np.array([12,32,96])
plt.subplot(2,1,2)
plt.plot(overs,runs_i,color='blue',label='India')
plt.legend(loc='best')
plt.subplot(2,1,1)
plt.plot(overs_a,runs_a,color='yellow',label='Aus')
plt.legend(loc='best')
plt.show()

import numpy as np
a=np.array([25,60,5,10])
labe=["aiml","python","pandas","numpy"]
colors=["red","green","blue","black"]
explo=[0.2,0,0,0]
plt.pie(a,labels=labe,explode=explo,colors=colors,startangle=180,textprops={'fontsize':10})
plt.legend(labe,loc="lower right")
plt.axis('equal')
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
data=pd.read_csv("/content/temp2.csv")
mv=data["ANNUAL"].mean()
max=data["ANNUAL"].max()
min=data["ANNUAL"].min()
data=data.fillna(mv)
print("Average of annual temperature of all years:")
print(mv)
print("maximum annual temperature is:")
print(max)
print("minimum annual temperature is:")
print(min)
day=0
for i in data['ANNUAL']:
  if(i>mv):
    day=day+1
print("number of days the temperature exceeded threshold is:",day)
plt.plot(data['YEAR'],data["ANNUAL"],label="annual_temp",color='blue')
plt.legend(loc="best")
plt.title("Annual temperature for years(1901-1950)")
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
data=pd.read_excel("/content/Book1.xlsx")
mv=data["Temperature"].mean()
max=data["Temperature"].max()
min=data["Temperature"].min()
data=data.fillna(mv)
print("Average of temperature for a month:")
print(mv)
print("maximum temperature in given days:")
print(max)
print("minimum temperature in given days:")
print(min)
day=0
for i in data['Temperature']:
  if(i>mv):
    day=day+1
    mv1=data["Temperature"].mean()
print("number of days the temperature exceeded threshold is:",mv1,day)
plt.plot(data['Days'],data["Temperature"],label="YEAR-2023",color='yellow')
plt.legend(loc='best')
plt.title("Temperature in celsius for 30 days")
plt.show()

pip install seaborn #day3

import seaborn as sns
import matplotlib.pyplot as plt
#load example dataset
tips=sns.load_dataset("tips")
#create a scatter plot
sns.scatterplot(x="total_bill",y="tip",data=tips)
plt.title("scatter plot of total bill vs tip")
plt.xlabel("Total Bill ($)")
plt.ylabel("Tip ($)")
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
#load example dataset
book1=sns.load_dataset("iris")
print(book1)
#create a scatter plot
sns.scatterplot(x="petal_length",y="sepal_width",data=book1)
plt.title("scatter plot of sepal_length vs sepal_length")
plt.xlabel("petal_length ($)")
plt.ylabel("sepal_width ($)")
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
#load example dataset
tips=sns.load_dataset("tips")
#create a violin plot
sns.violinplot(x="day",y="tip",data=tips)#violin plot
plt.title("distribution of total bill vs tip")
plt.xlabel("Day of the Week")
plt.ylabel("Tip ($)")
plt.show()

#load example dataset
iris=sns.load_dataset("iris")
print(book1)
#compute correlation matrix
correlation_matrix=iris.corr()
#create a heatmap of the correlation matrix
sns.heatmap(correlation_matrix,annot=True,cmap="coolwarm")
plt.title("correlation heat map of the Iris dataset")
plt.show()

#load example dataset
flight=sns.load_dataset("flights")
print(flight)
#compute correlation matrix
correlation_matrix=iris.corr()
#create a heatmap of the correlation matrix
sns.heatmap(correlation_matrix,annot=True,cmap="coolwarm")
plt.title("correlation heat map of the flight dataset")
plt.show()